{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"UserType.ADMIN": {
				"enum": [
					"admin"
				],
				"type": "string"
			},
			"SchoolAdminUser": {
				"properties": {
					"school": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"type": {
						"$ref": "#/components/schemas/UserType.ADMIN"
					},
					"id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"school",
					"email",
					"last_name",
					"first_name",
					"username",
					"type",
					"id"
				],
				"type": "object"
			},
			"UserType.OFFICIAL1": {
				"enum": [
					"official1"
				],
				"type": "string"
			},
			"UserType.OFFICIAL2": {
				"enum": [
					"official2"
				],
				"type": "string"
			},
			"UserType.FOUNDATION": {
				"enum": [
					"foundation"
				],
				"type": "string"
			},
			"OfficialUser": {
				"properties": {
					"foundation": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"type": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/UserType.OFFICIAL1"
							},
							{
								"$ref": "#/components/schemas/UserType.OFFICIAL2"
							},
							{
								"$ref": "#/components/schemas/UserType.FOUNDATION"
							}
						]
					},
					"id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"foundation",
					"email",
					"last_name",
					"first_name",
					"username",
					"type",
					"id"
				],
				"type": "object"
			},
			"UserType.APPLICANT": {
				"enum": [
					"applicant"
				],
				"type": "string"
			},
			"ApplicantUser": {
				"properties": {
					"school": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"type": {
						"$ref": "#/components/schemas/UserType.APPLICANT"
					},
					"id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"school",
					"email",
					"last_name",
					"first_name",
					"username",
					"type",
					"id"
				],
				"type": "object"
			},
			"User": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/SchoolAdminUser"
					},
					{
						"$ref": "#/components/schemas/OfficialUser"
					},
					{
						"$ref": "#/components/schemas/ApplicantUser"
					}
				]
			},
			"PaginatedResponseEnvelope_User_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"count": {
						"type": "number",
						"format": "double",
						"description": "Total number of items"
					},
					"next": {
						"type": "string",
						"description": "Url of the next page"
					},
					"previous": {
						"type": "string",
						"description": "Url of the previous page"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/User"
						},
						"type": "array"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"count",
					"next",
					"previous",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserType": {
				"enum": [
					"admin",
					"official1",
					"official2",
					"foundation",
					"applicant"
				],
				"type": "string"
			},
			"SchoolLevel": {
				"description": "Enum representing different school levels.\n0 = Elementary School, 1 = Middle School, 2 = High School",
				"enum": [
					"0",
					"1",
					"2"
				],
				"type": "string"
			},
			"ReRegistrationStatus": {
				"enum": [
					"Registered",
					"Not Registered",
					"Not Active"
				],
				"type": "string"
			},
			"SchoolApplicant": {
				"properties": {
					"re_registration_status": {
						"$ref": "#/components/schemas/ReRegistrationStatus"
					},
					"accepted_school_name": {
						"type": "string"
					},
					"registration_date": {
						"type": "string",
						"description": "ISO 8601 date string"
					},
					"school_level": {
						"$ref": "#/components/schemas/SchoolLevel"
					},
					"registration_path": {
						"type": "string",
						"description": "Registration path name"
					},
					"nisn": {
						"type": "string"
					},
					"dob": {
						"type": "string",
						"description": "Date of Birth in ISO 8601 date string"
					},
					"registration_id": {
						"type": "string"
					},
					"full_name": {
						"type": "string"
					},
					"id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"re_registration_status",
					"accepted_school_name",
					"registration_date",
					"school_level",
					"registration_path",
					"nisn",
					"dob",
					"registration_id",
					"full_name",
					"id"
				],
				"type": "object"
			},
			"PaginatedResponseEnvelope_SchoolApplicant_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"count": {
						"type": "number",
						"format": "double",
						"description": "Total number of items"
					},
					"next": {
						"type": "string",
						"description": "Url of the next page"
					},
					"previous": {
						"type": "string",
						"description": "Url of the previous page"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/SchoolApplicant"
						},
						"type": "array"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"count",
					"next",
					"previous",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegistrationType": {
				"description": "Enum representing different types of registration.\n0 = Zoning, 1 = Achievement, 2 = Affirmation, 3 = Transfer, 4 = Custom",
				"enum": [
					"0",
					"1",
					"2",
					"3",
					"4"
				],
				"type": "string"
			},
			"SchoolType": {
				"enum": [
					"Private",
					"Govt"
				],
				"type": "string"
			},
			"School": {
				"properties": {
					"address": {
						"type": "string"
					},
					"accreditation": {
						"type": "string"
					},
					"type": {
						"$ref": "#/components/schemas/SchoolType"
					},
					"npsn": {
						"type": "string"
					},
					"level": {
						"$ref": "#/components/schemas/SchoolLevel"
					},
					"name": {
						"type": "string"
					},
					"id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"address",
					"accreditation",
					"type",
					"npsn",
					"level",
					"name",
					"id"
				],
				"type": "object"
			},
			"PaginatedResponseEnvelope_School_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"count": {
						"type": "number",
						"format": "double",
						"description": "Total number of items"
					},
					"next": {
						"type": "string",
						"description": "Url of the next page"
					},
					"previous": {
						"type": "string",
						"description": "Url of the previous page"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/School"
						},
						"type": "array"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"count",
					"next",
					"previous",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SchoolDetail": {
				"properties": {
					"other_information": {
						"type": "string"
					},
					"extracurriculars": {
						"items": {
							"properties": {
								"description": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"id": {
									"type": "number",
									"format": "double"
								}
							},
							"required": [
								"description",
								"name",
								"id"
							],
							"type": "object"
						},
						"type": "array"
					},
					"school_facilities": {
						"properties": {
							"number_of_sports_facilities": {
								"type": "number",
								"format": "double"
							},
							"number_of_libraries": {
								"type": "number",
								"format": "double"
							},
							"number_of_laboratories": {
								"type": "number",
								"format": "double"
							},
							"number_of_classrooms": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"number_of_sports_facilities",
							"number_of_libraries",
							"number_of_laboratories",
							"number_of_classrooms"
						],
						"type": "object"
					},
					"educators_and_students": {
						"properties": {
							"number_of_students_grade_6": {
								"type": "number",
								"format": "double"
							},
							"number_of_students_grade_5": {
								"type": "number",
								"format": "double"
							},
							"number_of_students_grade_4": {
								"type": "number",
								"format": "double"
							},
							"number_of_students_grade_3": {
								"type": "number",
								"format": "double"
							},
							"number_of_students_grade_2": {
								"type": "number",
								"format": "double"
							},
							"number_of_students_grade_1": {
								"type": "number",
								"format": "double"
							},
							"number_of_teachers": {
								"type": "number",
								"format": "double"
							},
							"number_of_administrative_staff": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"number_of_students_grade_6",
							"number_of_students_grade_5",
							"number_of_students_grade_4",
							"number_of_students_grade_3",
							"number_of_students_grade_2",
							"number_of_students_grade_1",
							"number_of_teachers",
							"number_of_administrative_staff"
						],
						"type": "object"
					},
					"general_information": {
						"properties": {
							"type": {
								"$ref": "#/components/schemas/SchoolType"
							},
							"curriculum": {
								"type": "string"
							},
							"accreditation_year": {
								"type": "string"
							},
							"accreditation": {
								"type": "string"
							},
							"level": {
								"$ref": "#/components/schemas/SchoolLevel"
							},
							"email": {
								"type": "string"
							},
							"address": {
								"properties": {
									"address": {
										"type": "string"
									},
									"coordinates": {
										"properties": {
											"lng": {
												"type": "number",
												"format": "double"
											},
											"lat": {
												"type": "number",
												"format": "double"
											}
										},
										"required": [
											"lng",
											"lat"
										],
										"type": "object"
									},
									"postal_code": {
										"type": "string"
									},
									"sub_district": {
										"type": "string"
									},
									"district": {
										"type": "string"
									},
									"city": {
										"type": "string"
									},
									"province": {
										"type": "string"
									}
								},
								"required": [
									"address",
									"coordinates",
									"postal_code",
									"sub_district",
									"district",
									"city",
									"province"
								],
								"type": "object"
							},
							"npsn": {
								"type": "string"
							},
							"name": {
								"type": "string"
							}
						},
						"required": [
							"type",
							"curriculum",
							"accreditation_year",
							"accreditation",
							"level",
							"email",
							"address",
							"npsn",
							"name"
						],
						"type": "object"
					},
					"id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"other_information",
					"extracurriculars",
					"school_facilities",
					"educators_and_students",
					"general_information",
					"id"
				],
				"type": "object"
			},
			"RegistrationPathParameterType": {
				"enum": [
					"total_nilai",
					"umur",
					"jarak",
					"tanggal_pendaftaran"
				],
				"type": "string"
			},
			"RegistrationPathCalculationParameter": {
				"properties": {
					"params": {
						"items": {
							"$ref": "#/components/schemas/RegistrationPathParameterType"
						},
						"type": "array"
					},
					"registration_type": {
						"items": {
							"$ref": "#/components/schemas/RegistrationType"
						},
						"type": "array",
						"description": "Array of Enum representing different types of registration.\n0 = Zoning, 1 = Achievement, 2 = Affirmation, 3 = Transfer, 4 = Custom"
					}
				},
				"required": [
					"params",
					"registration_type"
				],
				"type": "object"
			},
			"ResponseEnvelope_RegistrationPathCalculationParameter-Array_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/RegistrationPathCalculationParameter"
						},
						"type": "array"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegistrationPathStatus": {
				"description": "0 = Active, 1 = Non-active",
				"enum": [
					"1",
					"0"
				],
				"type": "string"
			},
			"RegistrationPath": {
				"properties": {
					"is_have_payment": {
						"type": "boolean",
						"description": "Boolean value indicating whether the registration path has payment or not."
					},
					"status": {
						"$ref": "#/components/schemas/RegistrationPathStatus",
						"description": "Registration path status"
					},
					"end_date": {
						"type": "string",
						"description": "ISO 8601 date-time string"
					},
					"start_date": {
						"type": "string",
						"description": "ISO 8601 date-time string"
					},
					"description": {
						"type": "string"
					},
					"registration_type": {
						"$ref": "#/components/schemas/RegistrationType"
					},
					"level": {
						"$ref": "#/components/schemas/SchoolLevel"
					},
					"name": {
						"type": "string",
						"description": "Name of the registration path"
					},
					"id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"is_have_payment",
					"status",
					"end_date",
					"start_date",
					"description",
					"registration_type",
					"level",
					"name",
					"id"
				],
				"type": "object"
			},
			"PaginatedResponseEnvelope_RegistrationPath_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"count": {
						"type": "number",
						"format": "double",
						"description": "Total number of items"
					},
					"next": {
						"type": "string",
						"description": "Url of the next page"
					},
					"previous": {
						"type": "string",
						"description": "Url of the previous page"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/RegistrationPath"
						},
						"type": "array"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"count",
					"next",
					"previous",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResponseEnvelope_RegistrationPath_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"data": {
						"$ref": "#/components/schemas/RegistrationPath"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegistrationPathConfigType": {
				"description": "Enum to describe the field group type,\n0 = Academic, 1 = Non Academic, 2 = Custom",
				"enum": [
					"0",
					"1",
					"2"
				],
				"type": "string"
			},
			"RegistrationPathFieldType": {
				"description": "0 = Text, 1 = Number, 2 = Choice, 3 = Multiple Choice, 4 = Date, 5 = Document",
				"enum": [
					"0",
					"1",
					"2",
					"3",
					"4",
					"5"
				],
				"type": "string"
			},
			"RegistrationPathConfig": {
				"properties": {
					"is_editable": {
						"type": "boolean"
					},
					"is_deleteable": {
						"type": "boolean"
					},
					"fields": {
						"items": {
							"properties": {
								"point": {
									"type": "number",
									"format": "double",
									"nullable": true,
									"description": "Field\\`s point, nullable, null if the field`s type its not a Document."
								},
								"is_editable": {
									"type": "boolean"
								},
								"ordering": {
									"type": "number",
									"format": "double",
									"description": "Field ordering"
								},
								"options": {
									"items": {
										"properties": {
											"label": {
												"type": "string",
												"description": "Option label"
											},
											"id": {
												"type": "number",
												"format": "double",
												"description": "Option ID"
											}
										},
										"required": [
											"label"
										],
										"type": "object"
									},
									"type": "array",
									"description": "List of options for the field. Only applicable for field type 2 and 3."
								},
								"field_type": {
									"$ref": "#/components/schemas/RegistrationPathFieldType",
									"description": "Field type\n0 = Text, 1 = Number, 2 = Choice, 3 = Multiple Choice, 4 = Date, 5 = Document"
								},
								"is_required": {
									"type": "boolean",
									"description": "Boolean value indicating whether the field is required or not."
								},
								"title": {
									"type": "string",
									"description": "Field title"
								},
								"id": {
									"type": "number",
									"format": "double"
								}
							},
							"required": [
								"point",
								"is_editable",
								"ordering",
								"options",
								"field_type",
								"is_required",
								"title"
							],
							"type": "object"
						},
						"type": "array",
						"description": "List of fields in the group"
					},
					"type": {
						"$ref": "#/components/schemas/RegistrationPathConfigType",
						"description": "Config type"
					},
					"name": {
						"type": "string",
						"description": "Fields group name"
					},
					"id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"is_editable",
					"is_deleteable",
					"fields",
					"type",
					"name"
				],
				"type": "object"
			},
			"RegistrationPathBillingScheduleType": {
				"description": "0 = Pay at registration, 1 = Pay after acceptance",
				"enum": [
					"0",
					"1"
				],
				"type": "string"
			},
			"RegistrationPathPaymentMethod": {
				"enum": [
					"BANK_TRANSFER",
					"QRIS",
					"EWALLET"
				],
				"type": "string"
			},
			"RegistrationPathPaymentConfig": {
				"properties": {
					"payment_methods": {
						"items": {
							"$ref": "#/components/schemas/RegistrationPathPaymentMethod"
						},
						"type": "array",
						"description": "List of payment methods available for the registration path."
					},
					"items": {
						"items": {
							"properties": {
								"billing_schedule_type": {
									"$ref": "#/components/schemas/RegistrationPathBillingScheduleType",
									"description": "When the payment should be made.\n0 = Pay at registration, 1 = Pay after acceptance"
								},
								"price": {
									"type": "number",
									"format": "double"
								},
								"name": {
									"type": "string"
								},
								"id": {
									"type": "number",
									"format": "double"
								}
							},
							"required": [
								"billing_schedule_type",
								"price",
								"name"
							],
							"type": "object"
						},
						"type": "array",
						"description": "List of items need to be paid for the registration path."
					},
					"id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"payment_methods",
					"items"
				],
				"type": "object",
				"description": "Payment configuration for the registration path (Step 4)"
			},
			"RegistrationPathPayload": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"general": {
						"properties": {
							"end_date": {
								"type": "string",
								"description": "ISO 8601 date-time string"
							},
							"start_date": {
								"type": "string",
								"description": "ISO 8601 date-time string"
							},
							"description": {
								"type": "string"
							},
							"registration_type": {
								"$ref": "#/components/schemas/RegistrationType"
							},
							"level": {
								"$ref": "#/components/schemas/SchoolLevel"
							},
							"name": {
								"type": "string",
								"description": "Name of the registration path"
							}
						},
						"required": [
							"end_date",
							"start_date",
							"description",
							"registration_type",
							"level",
							"name"
						],
						"type": "object",
						"description": "Registration path general information (Step 1)"
					},
					"configuration": {
						"items": {
							"$ref": "#/components/schemas/RegistrationPathConfig"
						},
						"type": "array",
						"description": "Form configuration for the registration path (Step 2)"
					},
					"schools": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "List of school IDs that are associated with the registration path (Step 3)"
					},
					"payment_config": {
						"$ref": "#/components/schemas/RegistrationPathPaymentConfig"
					},
					"zone_id": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Registration path zone id, null if the registration path is not zone-based."
					}
				},
				"required": [
					"general",
					"configuration",
					"schools",
					"zone_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegistrationPathDetail": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"general": {
						"properties": {
							"end_date": {
								"type": "string",
								"description": "ISO 8601 date-time string"
							},
							"start_date": {
								"type": "string",
								"description": "ISO 8601 date-time string"
							},
							"description": {
								"type": "string"
							},
							"registration_type": {
								"$ref": "#/components/schemas/RegistrationType"
							},
							"level": {
								"$ref": "#/components/schemas/SchoolLevel"
							},
							"name": {
								"type": "string",
								"description": "Name of the registration path"
							}
						},
						"required": [
							"end_date",
							"start_date",
							"description",
							"registration_type",
							"level",
							"name"
						],
						"type": "object",
						"description": "Registration path general information (Step 1)"
					},
					"configuration": {
						"items": {
							"$ref": "#/components/schemas/RegistrationPathConfig"
						},
						"type": "array",
						"description": "Form configuration for the registration path (Step 2)"
					},
					"schools": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "List of school IDs that are associated with the registration path (Step 3)"
					},
					"payment_config": {
						"$ref": "#/components/schemas/RegistrationPathPaymentConfig"
					},
					"zone_id": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Registration path zone id, null if the registration path is not zone-based."
					},
					"has_applicant": {
						"type": "boolean",
						"description": "Boolean value indicating whether the registration path has applicant or not."
					}
				},
				"required": [
					"general",
					"configuration",
					"schools",
					"zone_id",
					"has_applicant"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResponseEnvelope_RegistrationPathDetail_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"data": {
						"$ref": "#/components/schemas/RegistrationPathDetail"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResponseEnvelope_null_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"data": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegistrationPathPaymentStatus": {
				"enum": [
					"CREATED",
					"WAITING_PAYMENT",
					"PAYMENT_IN_PROGRESS",
					"DISBURSE_IN_PROGRESS",
					"COMPLETE",
					"INCOMPLETE",
					"EXPIRED",
					"PAYMENT_FAILED"
				],
				"type": "string"
			},
			"RegistrationPathPayment": {
				"properties": {
					"transaction_code": {
						"type": "string"
					},
					"payment_status": {
						"$ref": "#/components/schemas/RegistrationPathPaymentStatus"
					},
					"payment_method": {
						"type": "string"
					},
					"payment_date": {
						"type": "string"
					},
					"payment_amount": {
						"type": "number",
						"format": "double"
					},
					"fee_names": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"student_name": {
						"type": "string"
					},
					"billing_schedule_type": {
						"$ref": "#/components/schemas/RegistrationPathBillingScheduleType"
					},
					"id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"transaction_code",
					"payment_status",
					"payment_method",
					"payment_date",
					"payment_amount",
					"fee_names",
					"student_name",
					"billing_schedule_type",
					"id"
				],
				"type": "object"
			},
			"PaginatedResponseEnvelope_RegistrationPathPayment_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"count": {
						"type": "number",
						"format": "double",
						"description": "Total number of items"
					},
					"next": {
						"type": "string",
						"description": "Url of the next page"
					},
					"previous": {
						"type": "string",
						"description": "Url of the previous page"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/RegistrationPathPayment"
						},
						"type": "array"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"count",
					"next",
					"previous",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegistrationInformation": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"level": {
						"$ref": "#/components/schemas/SchoolLevel"
					},
					"type": {
						"$ref": "#/components/schemas/RegistrationType"
					},
					"quota": {
						"type": "integer",
						"format": "int32",
						"description": "The quota percentage information for the registration path.",
						"maximum": 100,
						"minimum": 1
					}
				},
				"required": [
					"id",
					"name",
					"level",
					"type",
					"quota"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegistrationInformationDetailType": {
				"description": "Enum representing different types of registration information details.\n0 = Requirement, 1 = Flow, 2 = Schedule, 3 = School",
				"enum": [
					"0",
					"1",
					"2",
					"3"
				],
				"type": "string"
			},
			"RegistrationInformationDetail": {
				"properties": {
					"document": {
						"type": "string",
						"description": "URL to the document for the registration information detail."
					},
					"description": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"type": {
						"$ref": "#/components/schemas/RegistrationInformationDetailType"
					},
					"registration_information": {
						"$ref": "#/components/schemas/RegistrationInformation"
					},
					"id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"document",
					"description",
					"title",
					"type",
					"registration_information",
					"id"
				],
				"type": "object"
			},
			"ResponseEnvelope_RegistrationInformationDetail_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"data": {
						"$ref": "#/components/schemas/RegistrationInformationDetail"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedResponseEnvelope_RegistrationInformation_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"count": {
						"type": "number",
						"format": "double",
						"description": "Total number of items"
					},
					"next": {
						"type": "string",
						"description": "Url of the next page"
					},
					"previous": {
						"type": "string",
						"description": "Url of the previous page"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/RegistrationInformation"
						},
						"type": "array"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"count",
					"next",
					"previous",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegistrationInformationWithDetails": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"level": {
						"$ref": "#/components/schemas/SchoolLevel"
					},
					"type": {
						"$ref": "#/components/schemas/RegistrationType"
					},
					"quota": {
						"type": "integer",
						"format": "int32",
						"description": "The quota percentage information for the registration path.",
						"maximum": 100,
						"minimum": 1
					},
					"registration_details": {
						"items": {
							"$ref": "#/components/schemas/RegistrationInformationDetail"
						},
						"type": "array",
						"description": "Registration details for the registration information."
					}
				},
				"required": [
					"id",
					"name",
					"level",
					"type",
					"quota",
					"registration_details"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResponseEnvelope_RegistrationInformationWithDetails_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"data": {
						"$ref": "#/components/schemas/RegistrationInformationWithDetails"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResponseEnvelope_RegistrationInformation_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"data": {
						"$ref": "#/components/schemas/RegistrationInformation"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DuplicateTitleResponse": {
				"properties": {
					"data": {
						"properties": {
							"name": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"description": "for duplicate name, it must be an array with string \"name_is_duplicate\" as the item"
							}
						},
						"required": [
							"name"
						],
						"type": "object"
					},
					"message": {
						"type": "string"
					},
					"error": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"code": {
						"type": "number",
						"enum": [
							400
						],
						"nullable": false
					}
				},
				"required": [
					"data",
					"message",
					"error",
					"code"
				],
				"type": "object"
			},
			"Pick_RegistrationInformation.Exclude_keyofRegistrationInformation.id__": {
				"properties": {
					"name": {
						"type": "string"
					},
					"level": {
						"$ref": "#/components/schemas/SchoolLevel"
					},
					"type": {
						"$ref": "#/components/schemas/RegistrationType"
					},
					"quota": {
						"type": "integer",
						"format": "int32",
						"description": "The quota percentage information for the registration path.",
						"maximum": 100,
						"minimum": 1
					}
				},
				"required": [
					"name",
					"level",
					"type",
					"quota"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_RegistrationInformation.id_": {
				"$ref": "#/components/schemas/Pick_RegistrationInformation.Exclude_keyofRegistrationInformation.id__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"GeneralInformation": {
				"properties": {
					"picture": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"picture",
					"description",
					"title",
					"id"
				],
				"type": "object"
			},
			"ResponseEnvelope_GeneralInformation-or-null_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"data": {
						"allOf": [
							{
								"$ref": "#/components/schemas/GeneralInformation"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResponseEnvelope_GeneralInformation_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"data": {
						"$ref": "#/components/schemas/GeneralInformation"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ValidationError_GeneralInformation_": {
				"properties": {
					"code": {
						"type": "number",
						"enum": [
							400
						],
						"nullable": false,
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false,
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"data": {
						"properties": {},
						"type": "object",
						"description": "Key value pair of field and error messages"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FAQ": {
				"properties": {
					"description": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"description",
					"title",
					"id"
				],
				"type": "object"
			},
			"PaginatedResponseEnvelope_FAQ_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"count": {
						"type": "number",
						"format": "double",
						"description": "Total number of items"
					},
					"next": {
						"type": "string",
						"description": "Url of the next page"
					},
					"previous": {
						"type": "string",
						"description": "Url of the previous page"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/FAQ"
						},
						"type": "array"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"count",
					"next",
					"previous",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResponseEnvelope_FAQ_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"data": {
						"$ref": "#/components/schemas/FAQ"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ValidationError_FAQ_": {
				"properties": {
					"code": {
						"type": "number",
						"enum": [
							400
						],
						"nullable": false,
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false,
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"data": {
						"properties": {},
						"type": "object",
						"description": "Key value pair of field and error messages"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_FAQ.Exclude_keyofFAQ.id__": {
				"properties": {
					"title": {
						"type": "string"
					},
					"description": {
						"type": "string"
					}
				},
				"required": [
					"title",
					"description"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_FAQ.id_": {
				"$ref": "#/components/schemas/Pick_FAQ.Exclude_keyofFAQ.id__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"ContactInfo": {
				"properties": {
					"website": {
						"type": "string"
					},
					"facebook": {
						"type": "string",
						"description": "Profile URL, not the username."
					},
					"instagram": {
						"type": "string",
						"description": "Profile URL, not the username."
					},
					"whatsapp": {
						"type": "string",
						"description": "Should be already formatted with the country code without the plus sign."
					},
					"other_phone": {
						"type": "string"
					},
					"alternative_phone": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"address": {
						"type": "string"
					}
				},
				"required": [
					"website",
					"facebook",
					"instagram",
					"whatsapp",
					"other_phone",
					"alternative_phone",
					"phone",
					"email",
					"address"
				],
				"type": "object"
			},
			"ResponseEnvelope_ContactInfo_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"data": {
						"$ref": "#/components/schemas/ContactInfo"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Banner": {
				"properties": {
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"picture": {
						"type": "string",
						"description": "Picture URL"
					},
					"description": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"picture",
					"description",
					"title",
					"id"
				],
				"type": "object"
			},
			"ResponseEnvelope_Banner-or-null_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"data": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Banner"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResponseEnvelope_Banner_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"data": {
						"$ref": "#/components/schemas/Banner"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResponseEnvelope__banner_duplicated-string__": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"data": {
						"properties": {
							"banner_duplicated": {
								"type": "string"
							}
						},
						"required": [
							"banner_duplicated"
						],
						"type": "object"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"buffer.File": {
				"description": "Provides information about files and allows JavaScript in a web page to access their content.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/File)\n`File` class is a global reference for `import { File } from 'node:buffer'`\nhttps://nodejs.org/api/buffer.html#class-file",
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"Announcement": {
				"properties": {
					"created_by": {
						"type": "string"
					},
					"updated_at": {
						"type": "string",
						"description": "ISO 8601 date-time string",
						"format": "date-time"
					},
					"created_at": {
						"type": "string",
						"description": "ISO 8601 date-time string",
						"format": "date-time"
					},
					"file": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/buffer.File"
							}
						]
					},
					"description": {
						"type": "string",
						"description": "This is an HTML string"
					},
					"title": {
						"type": "string"
					},
					"id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"created_by",
					"updated_at",
					"created_at",
					"description",
					"title",
					"id"
				],
				"type": "object"
			},
			"PaginatedResponseEnvelope_Announcement_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"count": {
						"type": "number",
						"format": "double",
						"description": "Total number of items"
					},
					"next": {
						"type": "string",
						"description": "Url of the next page"
					},
					"previous": {
						"type": "string",
						"description": "Url of the previous page"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/Announcement"
						},
						"type": "array"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"count",
					"next",
					"previous",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResponseEnvelope_Announcement_": {
				"properties": {
					"code": {
						"type": "number",
						"format": "double",
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"data": {
						"$ref": "#/components/schemas/Announcement"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ValidationError_AnnouncementPayload_": {
				"properties": {
					"code": {
						"type": "number",
						"enum": [
							400
						],
						"nullable": false,
						"description": "HTTP Response code"
					},
					"error": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false,
						"description": "Error flag"
					},
					"message": {
						"type": "string",
						"description": "Message"
					},
					"data": {
						"properties": {},
						"type": "object",
						"description": "Key value pair of field and error messages"
					}
				},
				"required": [
					"code",
					"error",
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "PPDB API",
		"version": "1.0.0",
		"description": "PPDB API",
		"license": {
			"name": "Private"
		},
		"contact": {}
	},
	"paths": {
		"/v2/ppdb/users": {
			"get": {
				"operationId": "GetUsers",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResponseEnvelope_User_"
								}
							}
						}
					}
				},
				"description": "Get All Users paginated",
				"summary": "Get all users",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page number",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"default": 1,
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Number of items per page",
						"in": "query",
						"name": "page_size",
						"required": false,
						"schema": {
							"default": 10,
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Search keyword",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "search by username",
						"in": "query",
						"name": "username",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "user_type",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/components/schemas/UserType"
							}
						}
					}
				]
			}
		},
		"/v2/ppdb/final-result": {
			"get": {
				"operationId": "GetApplicants",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResponseEnvelope_SchoolApplicant_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "Success",
											"count": 100,
											"next": "",
											"previous": "",
											"data": [
												{
													"id": 1,
													"accepted_school_name": "School 1",
													"dob": "2025-03-12T06:44:33.969Z",
													"full_name": "John Doe",
													"nisn": "12345678",
													"re_registration_status": "Registered",
													"registration_path": "Jalur Langit",
													"registration_id": "2938493843",
													"registration_date": "2025-03-12T06:44:33.969Z",
													"school_level": "2"
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Get School Final applicant",
				"summary": "Get all school final applicant",
				"tags": [
					"School Applicant"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page number",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"default": 1,
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Number of items per page",
						"in": "query",
						"name": "page_size",
						"required": false,
						"schema": {
							"default": 10,
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "registration_type",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RegistrationType"
						}
					},
					{
						"description": "Search keyword",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/ppdb/schools": {
			"get": {
				"operationId": "GetSchools",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResponseEnvelope_School_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "Success",
											"count": 100,
											"next": "",
											"previous": "",
											"data": [
												{
													"id": 1,
													"name": "School 1",
													"npsn": "12345678",
													"type": "Private",
													"accreditation": "A",
													"address": "Jl. ABC",
													"level": "0"
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Get All Schools paginated",
				"summary": "Get all schools",
				"tags": [
					"School"
				],
				"security": [],
				"parameters": [
					{
						"description": "Page number",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"default": 1,
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Number of items per page",
						"in": "query",
						"name": "page_size",
						"required": false,
						"schema": {
							"default": 10,
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Search keyword",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "filter by school levels",
						"in": "query",
						"name": "levels",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/components/schemas/SchoolLevel"
							}
						}
					},
					{
						"description": "filter by school ids",
						"in": "query",
						"name": "ids",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "get schools based on zone id",
						"in": "query",
						"name": "zone_id",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/v2/ppdb/schools/{schoolId}": {
			"get": {
				"operationId": "GetSchool",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SchoolDetail"
								},
								"examples": {
									"Example 1": {
										"value": {
											"id": 1,
											"general_information": {
												"name": "School 1",
												"npsn": "12345678",
												"address": {
													"province": "Jawa Barat",
													"city": "Bandung",
													"district": "Cibiru",
													"sub_district": " Cileunyi",
													"postal_code": "12345",
													"coordinates": {
														"lat": -6.914744,
														"lng": 107.619125
													},
													"address": "Jl. ABC"
												},
												"email": "",
												"level": "0",
												"accreditation": "A",
												"accreditation_year": "2021",
												"curriculum": "Kurikulum 2013",
												"type": "Govt"
											},
											"educators_and_students": {
												"number_of_administrative_staff": 10,
												"number_of_teachers": 10,
												"number_of_students_grade_1": 100,
												"number_of_students_grade_2": 100,
												"number_of_students_grade_3": 100,
												"number_of_students_grade_4": 100,
												"number_of_students_grade_5": 100,
												"number_of_students_grade_6": 100
											},
											"school_facilities": {
												"number_of_classrooms": 10,
												"number_of_laboratories": 10,
												"number_of_libraries": 10,
												"number_of_sports_facilities": 10
											},
											"extracurriculars": [
												{
													"id": 1,
													"name": "Pramuka",
													"description": "Kegiatan Pramuka"
												}
											],
											"other_information": "Other Information"
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"School"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "schoolId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/v2/ppdb/registration-paths/paramater": {
			"get": {
				"operationId": "GetRegistrationPathParameter",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_RegistrationPathCalculationParameter-Array_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "",
											"data": [
												{
													"registration_type": [
														"1"
													],
													"params": [
														"total_nilai",
														"umur",
														"tanggal_pendaftaran"
													]
												},
												{
													"registration_type": [
														"0"
													],
													"params": [
														"total_nilai",
														"umur",
														"tanggal_pendaftaran"
													]
												},
												{
													"registration_type": [
														"2",
														"3",
														"4"
													],
													"params": [
														"total_nilai",
														"umur",
														"tanggal_pendaftaran"
													]
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Get registration path calculation parameter that is used to calculate applicant priority based on their registration path type.",
				"summary": "Get registration path calculation parameter",
				"tags": [
					"Registration Path Parameter"
				],
				"security": [],
				"parameters": []
			},
			"put": {
				"operationId": "UpdateRegistrationPathParameter",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_RegistrationPathCalculationParameter-Array_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "",
											"data": [
												{
													"registration_type": [
														"1"
													],
													"params": [
														"total_nilai",
														"umur",
														"tanggal_pendaftaran"
													]
												},
												{
													"registration_type": [
														"0"
													],
													"params": [
														"total_nilai",
														"umur",
														"tanggal_pendaftaran"
													]
												},
												{
													"registration_type": [
														"2",
														"3",
														"4"
													],
													"params": [
														"total_nilai",
														"umur",
														"tanggal_pendaftaran"
													]
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Update registration path calculation parameter that is used to calculate applicant priority based on their registration path type.",
				"summary": "Update registration path calculation parameter",
				"tags": [
					"Registration Path Parameter"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"items": {
									"$ref": "#/components/schemas/RegistrationPathCalculationParameter"
								},
								"type": "array"
							}
						}
					}
				}
			}
		},
		"/v2/ppdb/registration-paths": {
			"get": {
				"operationId": "GetRegistrationPaths",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResponseEnvelope_RegistrationPath_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "Success",
											"count": 100,
											"next": "",
											"previous": "",
											"data": [
												{
													"id": 1,
													"name": "Path 1",
													"level": "0",
													"registration_type": "1",
													"description": "This is the first path",
													"start_date": "2021-01-01T00:00:00Z",
													"end_date": "2021-01-01T00:00:00Z",
													"status": "1",
													"is_have_payment": false
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Get All Registration Paths paginated",
				"summary": "Get all registration paths",
				"tags": [
					"Registration Path"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"default": 1,
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "page_size",
						"required": false,
						"schema": {
							"default": 10,
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Array of SchoolLevel",
						"in": "query",
						"name": "levels",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/components/schemas/SchoolLevel"
							}
						}
					},
					{
						"in": "query",
						"name": "registration_types",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/components/schemas/RegistrationType"
							}
						}
					}
				]
			},
			"post": {
				"operationId": "CreateRegistrationPath",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_RegistrationPath_"
								}
							}
						}
					}
				},
				"description": "Create a new Registration Path",
				"summary": "Create a new registration path",
				"tags": [
					"Registration Path"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RegistrationPathPayload"
							}
						}
					}
				}
			}
		},
		"/v2/ppdb/registration-paths/{id}": {
			"get": {
				"operationId": "GetRegistrationPath",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_RegistrationPathDetail_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "Success",
											"data": {
												"id": 1,
												"general": {
													"name": "Path 1",
													"level": "0",
													"registration_type": "1",
													"description": "This is the first path",
													"start_date": "2021-01-01T00:00:00Z",
													"end_date": "2021-01-01T00:00:00Z"
												},
												"configuration": [
													{
														"id": 1,
														"type": "2",
														"fields": [
															{
																"field_type": "2",
																"is_required": true,
																"options": [
																	{
																		"id": 1,
																		"label": "Option 1"
																	},
																	{
																		"id": 2,
																		"label": "Option 2"
																	}
																],
																"ordering": 1,
																"title": "Field 1",
																"id": 1,
																"is_editable": true,
																"point": null
															}
														],
														"name": "General",
														"is_deleteable": true,
														"is_editable": true
													}
												],
												"schools": [
													1,
													2,
													3,
													4
												],
												"payment_config": {
													"items": [
														{
															"billing_schedule_type": "1",
															"name": "Item 1",
															"price": 1000000,
															"id": 1
														}
													],
													"payment_methods": [
														"BANK_TRANSFER"
													]
												},
												"zone_id": null,
												"has_applicant": false
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Get a Registration Path",
				"summary": "Get a registration path",
				"tags": [
					"Registration Path"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateRegistrationPath",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_RegistrationPath_"
								}
							}
						}
					}
				},
				"description": "Update a Registration Path",
				"summary": "Update a registration path",
				"tags": [
					"Registration Path"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RegistrationPathPayload"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteRegistrationPath",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_null_"
								}
							}
						}
					},
					"400": {
						"description": "Registration Path already have applicants",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_null_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 400,
											"error": true,
											"message": "Registration Path already have applicants",
											"data": null
										}
									}
								}
							}
						}
					}
				},
				"description": "Delete a Registration Path",
				"summary": "Delete a registration path",
				"tags": [
					"Registration Path"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/v2/ppdb/registration-paths/{registrationPathId}/registration-payments": {
			"get": {
				"operationId": "GetRegistrationPayment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResponseEnvelope_RegistrationPathPayment_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "Success",
											"count": 100,
											"next": "",
											"previous": "",
											"data": [
												{
													"id": 1,
													"billing_schedule_type": "1",
													"student_name": "John Doe",
													"fee_names": [
														"Item 1"
													],
													"payment_amount": 1000000,
													"payment_date": "2021-01-01T00:00:00Z",
													"payment_method": "Bank Transfer",
													"payment_status": "COMPLETE",
													"transaction_code": "123456"
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Get All Registration Payments paginated",
				"summary": "Get all registration payments",
				"tags": [
					"Registration Path"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "registrationPathId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"default": 1,
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "page_size",
						"required": false,
						"schema": {
							"default": 10,
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "billing_schedule_type",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RegistrationPathBillingScheduleType"
						}
					},
					{
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v2/ppdb/registration-detail": {
			"post": {
				"operationId": "AddRegistrationInformationDetail",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_RegistrationInformationDetail_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "",
											"data": {
												"id": 1,
												"description": "This is a test registration information detail",
												"document": "https://example.com/registration-information-detail.pdf",
												"registration_information": {
													"id": 1,
													"name": "Test Registration Information",
													"level": "0",
													"type": "1",
													"quota": 50
												},
												"title": "Test Registration Information",
												"type": "0"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Add registration information detail to the registration information",
				"summary": "Add Registration Information Detail",
				"tags": [
					"CMS",
					"Registration Information"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"title": {
										"type": "string"
									},
									"registration_information": {
										"type": "string",
										"description": "ID of the registration information"
									},
									"type": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"document": {
										"type": "string",
										"format": "binary"
									}
								},
								"required": [
									"title",
									"registration_information",
									"type",
									"description"
								]
							}
						}
					}
				}
			}
		},
		"/v2/ppdb/registration-detail/{id}": {
			"patch": {
				"operationId": "UpdateRegistrationInformationDetail",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_RegistrationInformationDetail_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "",
											"data": {
												"id": 1,
												"description": "This is a test registration information detail",
												"document": "https://example.com/registration-information-detail.pdf",
												"registration_information": {
													"id": 1,
													"name": "Test Registration Information",
													"level": "0",
													"type": "1",
													"quota": 50
												},
												"title": "Test Registration Information",
												"type": "0"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Update registration information detail",
				"summary": "Update Registration Information Detail",
				"tags": [
					"CMS",
					"Registration Information"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"title": {
										"type": "string"
									},
									"registration_information": {
										"type": "string",
										"description": "ID of the registration information"
									},
									"type": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"document": {
										"type": "string",
										"format": "binary"
									}
								},
								"required": [
									"title",
									"registration_information",
									"type",
									"description"
								]
							}
						}
					}
				}
			}
		},
		"/v2/ppdb/registration-information": {
			"get": {
				"operationId": "GetRegistrationInformation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResponseEnvelope_RegistrationInformation_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "",
											"count": 100,
											"next": "",
											"previous": "",
											"data": [
												{
													"id": 1,
													"name": "Test Registration Information",
													"level": "0",
													"type": "0",
													"quota": 50
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Get Path Registration Informations list",
				"summary": "Get Registration Information list",
				"tags": [
					"CMS",
					"Registration Information"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"default": 1,
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "page_size",
						"required": false,
						"schema": {
							"default": 10,
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateRegistrationInformation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_RegistrationInformation_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "",
											"data": {
												"id": 1,
												"name": "Test Registration Information",
												"level": "0",
												"type": "0",
												"quota": 50
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Duplicate Name",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DuplicateTitleResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 400,
											"error": true,
											"message": "Name is duplicate",
											"data": {
												"name": [
													"name_is_duplicate"
												]
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Create Path Registration Information",
				"summary": "Create Registration Information",
				"tags": [
					"CMS",
					"Registration Information"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_RegistrationInformation.id_"
							}
						}
					}
				}
			}
		},
		"/v2/ppdb/registration-information/{id}": {
			"get": {
				"operationId": "GetRegistrationInformationById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_RegistrationInformationWithDetails_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "",
											"data": {
												"id": 1,
												"name": "Test Registration Information",
												"level": "0",
												"type": "0",
												"registration_details": [
													{
														"id": 1,
														"registration_information": {
															"id": 1,
															"name": "Test Registration Information",
															"level": "0",
															"type": "0",
															"quota": 50
														},
														"type": "0",
														"title": "Syarat Pendaftaran",
														"description": "This is a test registration information",
														"document": "https://example.com/registration-information.jpg"
													}
												],
												"quota": 50
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Get Path Registration Information by ID",
				"summary": "Get Registration Information by ID",
				"tags": [
					"CMS",
					"Registration Information"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateRegistrationInformation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_RegistrationInformation_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "",
											"data": {
												"id": 1,
												"name": "Test Registration Information",
												"level": "0",
												"type": "0",
												"quota": 50
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Update Path Registration Information",
				"summary": "Update Registration Information",
				"tags": [
					"CMS",
					"Registration Information"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_RegistrationInformation.id_"
							}
						}
					}
				}
			}
		},
		"/v2/ppdb/general-information": {
			"get": {
				"operationId": "GetGeneralInformation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_GeneralInformation-or-null_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "",
											"data": {
												"id": 1,
												"title": "Test General Information",
												"description": "This is a test general information",
												"picture": "https://example.com/general-information.jpg"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Get PPDB General Information",
				"summary": "Get General Information",
				"tags": [
					"CMS",
					"General Information"
				],
				"security": [],
				"parameters": []
			},
			"post": {
				"operationId": "SaveGeneralInformation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_GeneralInformation_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "",
											"data": {
												"id": 1,
												"title": "Test General Information",
												"description": "This is a test general information",
												"picture": "https://example.com/general-information.jpg"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationError_GeneralInformation_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 400,
											"error": true,
											"message": "Validation Error",
											"data": {
												"title": [
													"Title is required"
												],
												"description": [
													"Description is required"
												]
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Submit PPDB General Information",
				"summary": "Submit General Information",
				"tags": [
					"CMS",
					"General Information"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"title": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"picture": {
										"type": "string",
										"format": "binary"
									}
								},
								"required": [
									"title",
									"description",
									"picture"
								]
							}
						}
					}
				}
			}
		},
		"/v2/ppdb/faqs": {
			"get": {
				"operationId": "GetFaqs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResponseEnvelope_FAQ_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "",
											"count": 100,
											"next": "",
											"previous": "",
											"data": [
												{
													"id": 1,
													"title": "Test Question",
													"description": "This is a test question"
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Get list of FAQs paginated",
				"summary": "Get FAQs",
				"tags": [
					"CMS",
					"FAQs"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"default": 1,
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "page_size",
						"required": false,
						"schema": {
							"default": 10,
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"post": {
				"operationId": "AddFaqs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_FAQ_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "",
											"data": {
												"id": 1,
												"title": "Test Question",
												"description": "This is a test question"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationError_FAQ_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 400,
											"error": true,
											"message": "Validation Error",
											"data": {
												"title": [
													"Title is required"
												],
												"description": [
													"Description is required"
												]
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Add a new FAQ",
				"summary": "Add FAQ",
				"tags": [
					"CMS",
					"FAQs"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_FAQ.id_"
							}
						}
					}
				}
			}
		},
		"/v2/ppdb/faqs/{id}": {
			"get": {
				"operationId": "GetFaq",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_FAQ_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "",
											"data": {
												"id": 1,
												"title": "Test Question",
												"description": "This is a test question"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Get a FAQ by ID",
				"summary": "Get FAQ",
				"tags": [
					"CMS",
					"FAQs"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateFaq",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_FAQ_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "",
											"data": {
												"id": 1,
												"title": "Test Question",
												"description": "This is a test question"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationError_FAQ_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 400,
											"error": true,
											"message": "Validation Error",
											"data": {
												"title": [
													"Title is required"
												],
												"description": [
													"Description is required"
												]
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Update a FAQ by ID",
				"summary": "Update FAQ",
				"tags": [
					"CMS",
					"FAQs"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_FAQ.id_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteFaq",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_null_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "",
											"data": null
										}
									}
								}
							}
						}
					}
				},
				"description": "Delete a FAQ by ID",
				"summary": "Delete FAQ",
				"tags": [
					"CMS",
					"FAQs"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/v2/ppdb/contacts": {
			"get": {
				"operationId": "GetContacts",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_ContactInfo_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "",
											"data": {
												"address": "Jl. Raya Ciputat Parung No. 1, Ciputat, Tangerang Selatan",
												"email": "ppdb@example.com",
												"phone": "021-123456",
												"alternative_phone": "08123456789",
												"other_phone": "08123456789",
												"whatsapp": "628123456789",
												"instagram": "https://instagram.com/ppdb",
												"facebook": "https://facebook.com/ppdb",
												"website": "https://www.ppdb.com"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Get PPDB Contact Information",
				"summary": "Get Contact Information",
				"tags": [
					"CMS",
					"Contact"
				],
				"security": [],
				"parameters": []
			},
			"post": {
				"operationId": "SaveContacts",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_ContactInfo_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "",
											"data": {
												"address": "Jl. Raya Ciputat Parung No. 1, Ciputat, Tangerang Selatan",
												"email": "ppdb@example.com",
												"phone": "021-123456",
												"alternative_phone": "08123456789",
												"other_phone": "08123456789",
												"whatsapp": "628123456789",
												"instagram": "https://instagram.com/ppdb",
												"facebook": "https://facebook.com/ppdb",
												"website": "https://www.ppdb.com"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Save PPDB Contact Information",
				"summary": "Save Contact Information",
				"tags": [
					"CMS",
					"Contact"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ContactInfo"
							}
						}
					}
				}
			}
		},
		"/v2/ppdb/banner": {
			"get": {
				"operationId": "GetBanner",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_Banner-or-null_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "",
											"data": {
												"id": 1,
												"title": "Test Banner",
												"description": "This is a test banner",
												"picture": "https://example.com/banner.jpg"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Get PPDB Banner",
				"summary": "Get Banner",
				"tags": [
					"CMS",
					"Banner"
				],
				"security": [],
				"parameters": []
			},
			"post": {
				"operationId": "CreateBanner",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_Banner_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "",
											"data": {
												"id": 1,
												"title": "Test Banner",
												"description": "This is a test banner",
												"picture": "https://example.com/banner.jpg"
											}
										}
									}
								}
							}
						}
					},
					"403": {
						"description": "Banner already exist",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope__banner_duplicated-string__"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 403,
											"error": true,
											"message": "Only one banner allowed on each province/city/foundation and school level (Elementary School, Middle School, High School)",
											"data": {
												"banner_duplicated": "Only one banner allowed on each province/city/foundation and school level (Elementary School, Middle School, High School)"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Create a PPDB Banner, will return an error if a banner is already exist",
				"summary": "Create Banner",
				"tags": [
					"CMS",
					"Banner"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"title": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"picture": {
										"type": "string",
										"format": "binary"
									}
								},
								"required": [
									"title",
									"description",
									"picture"
								]
							}
						}
					}
				}
			}
		},
		"/v2/ppdb/banner/{id}": {
			"patch": {
				"operationId": "UpdateBanner",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_Banner_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "",
											"data": {
												"id": 1,
												"title": "Test Banner",
												"description": "This is a test banner",
												"picture": "https://example.com/banner.jpg"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Update a PPDB Banner",
				"summary": "Update Banner",
				"tags": [
					"CMS",
					"Banner"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"title": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"picture": {
										"type": "string",
										"format": "binary"
									}
								},
								"required": [
									"title",
									"description",
									"picture"
								]
							}
						}
					}
				}
			}
		},
		"/v2/ppdb/announcements": {
			"get": {
				"operationId": "GetAnnouncements",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResponseEnvelope_Announcement_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "Success",
											"count": 100,
											"next": "",
											"previous": "",
											"data": [
												{
													"id": 1,
													"title": "Announcement 1",
													"description": "This is the first announcement",
													"file": "announcement1.pdf",
													"created_at": "2021-01-01T00:00:00Z",
													"updated_at": "2021-01-01T00:00:00Z",
													"created_by": "admin"
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Get All Announcements paginated",
				"summary": "Get all announcements",
				"tags": [
					"Announcement"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"default": 1,
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "page_size",
						"required": false,
						"schema": {
							"default": 10,
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateAnnouncement",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_Announcement_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "Success",
											"data": {
												"id": 1,
												"title": "Announcement 1",
												"description": "This is the first announcement",
												"file": "announcement1.pdf",
												"created_at": "2021-01-01T00:00:00Z",
												"updated_at": "2021-01-01T00:00:00Z",
												"created_by": "admin"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Duplicate Title",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationError_AnnouncementPayload_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 400,
											"error": true,
											"message": "Validation Error",
											"data": {
												"title": [
													"Title is required"
												],
												"description": [
													"Description is required"
												]
											}
										}
									},
									"Example 2": {
										"value": {
											"code": 400,
											"error": true,
											"message": "Title is duplicate",
											"data": {}
										}
									}
								}
							}
						}
					}
				},
				"summary": "Create an announcement",
				"tags": [
					"Announcement"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"title": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"file": {
										"type": "string",
										"format": "binary"
									}
								},
								"required": [
									"title",
									"description"
								]
							}
						}
					}
				}
			}
		},
		"/v2/ppdb/announcements/{id}": {
			"get": {
				"operationId": "GetAnnouncement",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_Announcement_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "Success",
											"data": {
												"id": 1,
												"title": "Announcement 1",
												"description": "This is the first announcement",
												"file": "announcement1.pdf",
												"created_at": "2021-01-01T00:00:00Z",
												"updated_at": "2021-01-01T00:00:00Z",
												"created_by": "admin"
											}
										}
									}
								}
							}
						}
					}
				},
				"summary": "Get an announcement",
				"tags": [
					"Announcement"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateAnnouncement",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_Announcement_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "Success",
											"data": {
												"id": 1,
												"title": "Announcement 1",
												"description": "This is the first announcement",
												"file": "announcement1.pdf",
												"created_at": "2021-01-01T00:00:00Z",
												"updated_at": "2021-01-01T00:00:00Z",
												"created_by": "admin"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationError_AnnouncementPayload_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 400,
											"error": true,
											"message": "Validation Error",
											"data": {
												"title": [
													"Title is required"
												],
												"description": [
													"Description is required"
												]
											}
										}
									}
								}
							}
						}
					}
				},
				"summary": "Update an announcement",
				"tags": [
					"Announcement"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"title": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"file": {
										"type": "string",
										"format": "binary"
									}
								},
								"required": [
									"title",
									"description"
								]
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteAnnouncement",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseEnvelope_null_"
								},
								"examples": {
									"Example 1": {
										"value": {
											"code": 200,
											"error": false,
											"message": "Success",
											"data": null
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Announcement"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}